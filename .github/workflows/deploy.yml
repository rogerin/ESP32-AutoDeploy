name: Build and Deploy Firmware

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y git wget flex bison gperf python3 python3-pip python3-setuptools cmake ninja-build ccache libffi-dev libssl-dev dfu-util

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Clone ESP-IDF
        run: |
          git clone --recursive https://github.com/espressif/esp-idf.git
          echo "ESP_IDF=$GITHUB_WORKSPACE/esp-idf" >> $GITHUB_ENV

      - name: Install ESP-IDF tools
        run: |
          ${{ env.ESP_IDF }}/install.sh

      - name: Export ESP-IDF environment variables
        run: |
          source ${{ env.ESP_IDF }}/export.sh
          echo "IDF_PATH=$IDF_PATH" >> $GITHUB_ENV
          echo "PATH=$PATH" >> $GITHUB_ENV

      - name: Set execute permission for export.sh
        run: |
          chmod +x ${{ env.ESP_IDF }}/export.sh
      
      - name: Run export.sh
        run: |
          . ${{ env.ESP_IDF }}/export.sh
        shell: bash

      - name: Open project files
        run: |
          cd src
      
      - name: Install Python dependencies
        run: |
          pip3 install setuptools wheel click pyyaml
        shell: bash
      
      - name: Install additional Python dependencies
        run: |
          pip3 install esp-idf-monitor
        shell: bash
      
      - name: Build project
        run: |
          idf.py build

      - name: Install esptool
        run: |
          echo "Install esptool"
          # python -m pip install --upgrade pip
          pip3 install esptool

      - name: Extract Version from config.json
        id: config
        run: |
          echo "Extracting version..."
          VERSION=$(cat config.json | grep version | cut -d '"' -f 4)
          echo "::set-output name=version::$VERSION"

      - name: Create firmware binary
        run: |
          echo "Building firmware for version ${{ steps.config.outputs.version }}"
          esptool.py --chip esp32 elf2image --output esp32-autodeploy-${{ steps.config.outputs.version }}.bin build/project.elf
          # simulate: touch esp32-autodeploy-${{ steps.config.outputs.version }}.bin

      - name: Upload firmware to /firmware directory
        run: |
          echo "Upload to /firmware"
          mkdir -p firmware
          mv esp32-autodeploy-${{ steps.config.outputs.version }}.bin firmware/
      
      - name: Commit firmware binary
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add firmware/
          git commit -m "Deploy firmware version ${{ steps.config.outputs.version }}"
          git push